service: janken-cafe-backend
frameworkVersion: '3'

provider:
  name: aws
  deploymentMethod: direct	
  profile: serverless-admin
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    CONNECTIONS_TABLE: ${self:service}-connections-${self:provider.stage}
    PAIR_GAME_TABLE: ${self:service}-pair-game-${self:provider.stage}
    WEBSOCKET_API_ID: # This will be populated after first deploy or referenced via CloudFormation outputs
      Ref: WebsocketsApi # Reference to the API Gateway WebSocket API created below
    WEBSOCKET_API_ENDPOINT: # Construct the endpoint URL
      Fn::Join:
        - ''
        - - 'https://'
          - Ref: WebsocketsApi
          - '.execute-api.'
          - ${self:provider.region}
          - '.amazonaws.com/'
          - ${self:provider.stage}
    ALLOWED_ORIGINS: ${file(./serverless.vars.js):allowedOrigins}
  iam: 
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:Query 
          Resource:
            - Fn::GetAtt: [ConnectionsTable, Arn]
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ConnectionsTable}/index/StatePairIdIndex # GSI ARN
            - Fn::GetAtt: [PairGameTable, Arn]
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource:
            - Fn::Join:
              - ':'
              - - arn:aws:execute-api
                - ${self:provider.region}
                - ${aws:accountId}
                - ${self:provider.environment.WEBSOCKET_API_ID}
                - ${self:provider.stage}/POST/@connections/*

functions:
  connect:
    handler: src/functions/connect.handler
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: src/functions/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  defaultHandler:
    handler: src/functions/defaultHandler.handler
    events:
      - websocket:
          route: $default

resources:
  Resources:
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: state
            AttributeType: S
          - AttributeName: pairId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes: # To efficiently find waiting users
          - IndexName: StatePairIdIndex
            KeySchema:
              - AttributeName: state
                KeyType: HASH
              - AttributeName: pairId
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
    PairGameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PAIR_GAME_TABLE}
        AttributeDefinitions:
          - AttributeName: pairId
            AttributeType: S
        KeySchema:
          - AttributeName: pairId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins: 
  - serverless-offline
  - serverless-plugin-typescript

custom: 
  serverless-offline:
    httpPort: 3001 
    websocketPort: 3002
    lambdaPort: 3003